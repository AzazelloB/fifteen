{"version":3,"sources":["helpers.js","components/Cell.js","components/Grid.js","components/Select.js","components/Menu.js","hooks/useKey.js","App.js","index.js"],"names":["getGrid","size","range","Array","keys","grid","newRange","slice","map","el","i","j","splice","Math","floor","random","length","randomCell","isSolvable","array1D","concat","countInversions","row","zeroRow","didWin","getTime","h","m","s","Cell","number","moveCell","position","style","backgroundColor","cursor","id","className","onClick","Grid","gameOver","resetGame","gridStyle","gridTemplateRows","gridTemplateColumns","messageStyle","display","key","Select","curr","changeSize","children","useState","isOpened","toggleOpened","toggleDropdown","selectOption","e","parseInt","target","dropClass","trail","useTrail","config","tension","friction","x","b","from","reverse","div","zIndex","filter","interpolate","transform","Menu","time","amountOfMoves","useKey","setKey","useEffect","onDown","toLowerCase","includes","match","onUp","window","addEventListener","removeEventListener","App","setSize","setGrid","timer","setTimer","setAmountOfMoves","setGameOver","gameStarted","setGameStarted","input","moveEmptyCell","interval","setInterval","clearInterval","newSize","updateGameState","moves","newGrid","zeroIndex","indexOf","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ebbe505c.chunk.js","sourcesContent":["\r\nconst randomCell = range => {\r\n    return range.splice( Math.floor( Math.random() * range.length ), 1 )[0];\r\n};\r\n\r\nexport const getGrid = size => {\r\n    const range = [ ...Array( size * size ).keys() ];\r\n    let grid = [];\r\n\r\n    while ( ! isSolvable( grid ) ) {\r\n        const newRange = range.slice( 0 );\r\n        grid = [ ...Array( size ) ].map( ( el, i ) => [ ...Array( size ) ].map( ( el, j ) => randomCell( newRange ) ) );\r\n    }\r\n\r\n    return grid;\r\n};\r\n\r\n// TODO: still does not work\r\nconst isSolvable = grid => {\r\n    if ( ! grid.length ) {\r\n        return false;\r\n    }\r\n\r\n    const array1D = [].concat( ...grid ),\r\n          size = grid.length;\r\n\r\n    let countInversions = 0,\r\n        row = 0,\r\n        zeroRow = 0;\r\n\r\n    for ( let i = 0; i < array1D.length; i++ ) {\r\n        if ( i % size === 0 ) { // advance to next row\r\n            row++;\r\n        }\r\n        if ( array1D[ i ] === 0 ) { // the blank tile\r\n            zeroRow = row; // save the row on which encountered\r\n            // zeroRow = Math.ceil( ( i + 1 ) / size ); // save the row on which encountered\r\n            continue;\r\n        }\r\n        for ( let j = i + 1; j < array1D.length; j++ ) {\r\n            if ( array1D[ i ] > array1D[ j ] && array1D[ j ] !== 0 ) {\r\n                countInversions++;\r\n            }\r\n        }\r\n    }\r\n    // console.log(zeroRow);\r\n    if ( size % 2 === 0 ) { // even grid\r\n        if ( zeroRow % 2 === 0 ) { // blank on odd row; counting from bottom\r\n            return countInversions % 2 === 0;\r\n        } else { // blank on even row; counting from bottom\r\n            return countInversions % 2 !== 0;\r\n        }\r\n    } else { // odd grid\r\n        return countInversions % 2 === 0;\r\n    }\r\n};\r\n\r\nexport const didWin = grid => {\r\n    const size = grid.length - 1;\r\n    // Do not check all cells if blank cell is not in right bottom corner\r\n    if ( 0 !== grid[ size ][ size ] ) {\r\n        return false;\r\n    }\r\n\r\n    for ( let i = size; i >= 0; i-- ) {\r\n        //  check all but last cell\r\n        for ( let j = size - 1; j >= 0; j-- ) {\r\n            // check if current sell in on its place comparing it to index in array\r\n            // adding 1 to size because we substracted one from real size at the beginning\r\n            // adding 1 to sum because we need to turn index to number\r\n            if ( grid[ i ][ j ] !== ( i * ( size + 1 ) + j ) + 1 ) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nexport const getTime = ( { h, m, s } ) => {\r\n    if ( s < 10 ) {\r\n        s = '0' + s;\r\n    }\r\n    if ( m < 10 ) {\r\n        m = '0' + m;\r\n    }\r\n\r\n    return h + ':' + m + ':' + s;\r\n};\r\n","import React from 'react';\r\n\r\nfunction Cell( { number, moveCell, position } ) {\r\n    const move = () => {\r\n        moveCell( position );\r\n    }\r\n\r\n    const style = {\r\n        backgroundColor: ! number && 'transparent',\r\n        cursor: ! number && 'default',\r\n    }\r\n\r\n    return (\r\n        <button id={ number } className=\"cell\" onClick={ move } style={style}>\r\n            { number ? number : '' }\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Cell;\r\n","import React from 'react';\r\n// import { useSprings, animated } from 'react-spring';\r\n\r\nimport Cell from './Cell'\r\n\r\nfunction Grid( { size, grid, moveCell, gameOver, resetGame } ) {\r\n    const gridStyle = {\r\n        gridTemplateRows: `repeat( ${size}, 1fr )`,\r\n        gridTemplateColumns: `repeat( ${size}, 1fr )`,\r\n    }\r\n    const messageStyle = {\r\n        display: gameOver ? 'block' : 'none'\r\n    }\r\n\r\n    // const calculateMargin = grid => {\r\n    //     const size = grid.length - 1;\r\n    //     const cellSize = 50;\r\n    //     console.log(grid);\r\n    //     for ( let i = 0; i < grid.length; i++ ) {\r\n    //         for ( let j = 0; j < grid.length; j++ ) {\r\n    //             if ( size !== i && 0 === grid[ i + 1 ][ j ] ) {\r\n    //                 grid[ i ][ j ] = { marginTop: -cellSize };\r\n    //             } else if ( size !== j && 0 === grid[ i ][ j + 1 ] ) {\r\n    //                 grid[ i ][ j ] = { marginLeft: -cellSize };\r\n    //             } else if ( 0 !== i && 0 === grid[ i - 1 ][ j ] ) {\r\n    //                 grid[ i ][ j ] = { marginBottom: -cellSize };\r\n    //             } else if ( 0 !== j && 0 === grid[ i ][ j - 1 ] ) {\r\n    //                 grid[ i ][ j ] = { marginRight: -cellSize };\r\n    //             } else {\r\n    //                 grid[ i ][ j ] = { marginRight: -cellSize };\r\n    //             }\r\n    //         }\r\n    //     }\r\n    //\r\n    //     return grid;\r\n    // }\r\n    //\r\n    // // const springs = useSprings( grid.length * grid.length, index => ( { opacity: 1 } ) );\r\n    // const [ springs ] = useSprings( grid.length * grid.length, calculateMargin( grid ) );\r\n    //\r\n    // const AnimatedCell = animated( Cell );\r\n\r\n    return (\r\n        <div className=\"grid\" style={ gridStyle } >\r\n            { grid.map( ( el, i ) => el.map( ( el, j ) =>\r\n                <Cell key={ el } number={ el } position={{ i, j }} moveCell={ moveCell } />\r\n            ) ) }\r\n            { /* TODO: Finis */ }\r\n            { /* springs.map( ( props, i, ) =>\r\n                <AnimatedCell style={ props } key={ i } number={ i } position={{ i: 0, j: 0 }} moveCell={ moveCell } />\r\n            ) */ }\r\n            <button className=\"game-over-message\" style={ messageStyle } onClick={ resetGame }>\r\n                { gameOver ? 'Congratulations!' : '' }\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Grid;\r\n","import React, { useState } from 'react';\r\nimport { useTrail, animated } from 'react-spring';\r\n\r\nfunction Select( { curr, changeSize, children } ) {\r\n    const [ isOpened, toggleOpened ] = useState( false );\r\n\r\n    const toggleDropdown = () => {\r\n        toggleOpened( isOpened => ! isOpened );\r\n    }\r\n\r\n    const selectOption = e => {\r\n        if ( isOpened ) {\r\n            changeSize( parseInt( e.target.id ) );\r\n        }\r\n        toggleDropdown();\r\n    }\r\n\r\n    const dropClass = isOpened ? 'dropdown-wrapper opened' : 'dropdown-wrapper';\r\n\r\n    const config = { tension: 400, friction: 50 };\r\n    const trail = useTrail( children.length, {\r\n        config,\r\n        x: 35,\r\n        b: 90,\r\n        from: { x: 0, b: 100 },\r\n        reverse: ! isOpened,\r\n    } );\r\n\r\n    return (\r\n        <div className={ dropClass }>\r\n            <div className=\"dropdown\" onClick={ toggleDropdown }>\r\n                <div className=\"dropdown-selected\">\r\n                    { curr + 'x' + curr }\r\n                </div>\r\n\r\n                <div className=\"dropdown-arrow\"></div>\r\n            </div>\r\n            <div className=\"dropdown-options\">\r\n                { trail.map( ( { x, b }, i ) => (\r\n                    <animated.div\r\n                        key={ children[ i ] }\r\n                        id={ children[ i ] }\r\n                        onClick={ selectOption }\r\n                        style={ {\r\n                            zIndex: children[ i ] === curr ? children.length : children.length - i,\r\n                            filter: 0 === i % 2 && children[ i ] === curr && b.interpolate( b => `brightness( ${ b }% )` ),\r\n                            transform: x.interpolate( x => `translate3d( 0, ${ x * i }px, 0 )` )\r\n                        } }\r\n                    >\r\n                    { children[ i ] + 'x' + children[ i ] }\r\n                    </animated.div>\r\n                ) ) }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Select;\r\n","import React from 'react';\r\n\r\nimport Select from './Select';\r\n\r\nfunction Menu( { time, amountOfMoves, resetGame, size } ) {\r\n    return (\r\n        <div className=\"game-menu\">\r\n            <div  className=\"game-statistic\">\r\n                <span>Time: { time }</span>\r\n                <span>Moves: { amountOfMoves }</span>\r\n            </div>\r\n            <div className=\"game-controls\">\r\n                <button onClick={ resetGame }>Shuffle</button>\r\n                <Select\r\n                    curr={ size }\r\n                    changeSize={ resetGame }\r\n                >\r\n                    { [ ...Array( 6 ).keys() ].map( el => el + 2 ) }\r\n                    { /* selectOption => (\r\n                        [ ...Array( 6 ).keys() ].map( el => <div key={ el = el + 2 } id={ el } onClick={ selectOption } >{ el + 'x' + el }</div> )\r\n                    ) */ }\r\n                </Select>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Menu;\r\n","import { useState, useEffect } from 'react';\r\n\r\nfunction useKey( keys ) {\r\n\r\n    const [ key, setKey ] = useState( '' );\r\n\r\n    useEffect( () => {\r\n        const match = e => keys.map( el => el.toLowerCase() ).includes( e.key.toLowerCase() );\r\n\r\n        const onDown = e => {\r\n            if ( match( e ) ) {\r\n                setKey( e.key.toLowerCase() );\r\n            }\r\n        }\r\n\r\n        const onUp = e => {\r\n            setKey( '' );\r\n        }\r\n\r\n        window.addEventListener( 'keydown', onDown );\r\n        window.addEventListener( 'keyup', onUp );\r\n\r\n        return () => {\r\n            window.removeEventListener( 'keydown', onDown );\r\n            window.removeEventListener( 'keyup', onUp );\r\n        }\r\n    }, [ keys ] );\r\n\r\n    return key;\r\n}\r\n\r\nexport default useKey;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\n// hepler functions\r\nimport { getGrid, didWin, getTime } from './helpers';\r\n\r\n// Components\r\nimport Grid from './components/Grid';\r\nimport Menu from './components/Menu';\r\n\r\n// Hooks\r\nimport useKey from './hooks/useKey';\r\n\r\nfunction App() {\r\n    const [ size, setSize ] = useState( 4 );\r\n    const [ grid, setGrid ] = useState( () => getGrid( size ) );\r\n    const [ timer, setTimer ] = useState( { h: 0, m: 0, s: 0 } );\r\n    const [ amountOfMoves, setAmountOfMoves ] = useState( 0 );\r\n    const [ gameOver, setGameOver ] = useState( false );\r\n    const [ gameStarted, setGameStarted ] = useState( false );\r\n    const input = useKey( [ 'ArrowUp', 'ArrowDown', 'ArrowRight', 'ArrowLeft', ' ' ] );\r\n\r\n    useEffect( () => {\r\n        switch ( input ) {\r\n            case 'arrowup': moveEmptyCell( { i: 1, j: 0 } ); break;\r\n            case 'arrowleft': moveEmptyCell( { i: 0, j: 1 } ); break;\r\n            case 'arrowright': moveEmptyCell( { i: 0, j: -1 } ); break;\r\n            case 'arrowdown': moveEmptyCell( { i: -1, j: 0 } ); break;\r\n            case ' ': resetGame(); break;\r\n            default: break; // For react to shut the fuck up\r\n        }\r\n\r\n        //eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [ input ] );\r\n\r\n    useEffect( () => {\r\n        let interval = null;\r\n        if ( gameStarted ) {\r\n            interval = setInterval( () => {\r\n                setTimer( ( { h, m, s } ) => {\r\n                    ++s;\r\n                    if ( 0 !== s && 0 === s % 60 ) {\r\n                        ++m;\r\n                        s = 0;\r\n                    }\r\n                    if ( 0 !== m && 0 === m % 60 ) {\r\n                        ++h;\r\n                        m = 0;\r\n                    }\r\n                    return ( { h, m, s } );\r\n                } );\r\n            }, 1000 );\r\n        }\r\n        if ( gameOver ) {\r\n            clearInterval( interval );\r\n        }\r\n        return () => clearInterval( interval );\r\n    }, [ gameStarted, gameOver ] );\r\n\r\n    const resetGame = newSize => {\r\n        if ( 'number' !== typeof newSize ) {\r\n            newSize = size;\r\n        }\r\n        setGameStarted( false );\r\n        setTimer( { h: 0, m: 0, s: 0 } );\r\n        setAmountOfMoves( 0 );\r\n        setSize( newSize );\r\n        setGrid( getGrid( newSize ) );\r\n        setGameOver( false );\r\n    };\r\n\r\n    const updateGameState = grid => {\r\n        if ( ! gameStarted ) {\r\n            setGameStarted( true );\r\n        }\r\n        setAmountOfMoves( moves => ++moves );\r\n        // setGrid( grid );\r\n\r\n        if ( didWin( grid ) ) {\r\n            setGameOver( true );\r\n        }\r\n    };\r\n\r\n    const moveCell = ( { i, j } ) => {\r\n        const newGrid = [ ...grid ];\r\n\r\n        if ( size - 1 !== i && 0 === newGrid[ i + 1 ][ j ] ) {\r\n            newGrid[ i + 1 ][ j ] = newGrid[ i ][ j ];\r\n        } else if ( size - 1 !== j && 0 === newGrid[ i ][ j + 1 ] ) {\r\n            newGrid[ i ][ j + 1 ] = newGrid[ i ][ j ];\r\n        } else if ( 0 !== i && 0 === newGrid[ i - 1 ][ j ] ) {\r\n            newGrid[ i - 1 ][ j ] = newGrid[ i ][ j ];\r\n        } else if ( 0 !== j && 0 === newGrid[ i ][ j - 1 ] ) {\r\n            newGrid[ i ][ j - 1 ] = newGrid[ i ][ j ];\r\n        } else {\r\n            return;\r\n        }\r\n\r\n        newGrid[ i ][ j ] = 0;\r\n\r\n        updateGameState( newGrid );\r\n    };\r\n\r\n    const moveEmptyCell = ( { i, j } ) => {\r\n        const newGrid = [ ...grid ];\r\n        let zeroIndex = null;\r\n\r\n        for ( let i = 0; i < newGrid.length; i++ ) {\r\n            let j = newGrid[ i ].indexOf( 0 );\r\n            if ( j > -1 ) {\r\n                zeroIndex = { i, j };\r\n                break;\r\n            }\r\n        }\r\n\r\n        if ( 'undefined' !== typeof newGrid[ zeroIndex.i + i ] && 'undefined' !== typeof newGrid[ zeroIndex.i + i ][ zeroIndex.j + j ] ) {\r\n             newGrid[ zeroIndex.i ][ zeroIndex.j ] = newGrid[ zeroIndex.i + i ][ zeroIndex.j + j ];\r\n             newGrid[ zeroIndex.i + i ][ zeroIndex.j + j ] = 0;\r\n\r\n             updateGameState( newGrid );\r\n         }\r\n    };\r\n\r\n    return (\r\n        <div className={ gameOver ? 'game game-over' : 'game' } >\r\n            <Menu\r\n                time={ getTime( timer ) }\r\n                amountOfMoves={ amountOfMoves }\r\n                resetGame={ resetGame }\r\n                size={ size }\r\n            />\r\n            <Grid\r\n                size={ size }\r\n                grid={ grid }\r\n                moveCell={ moveCell }\r\n                gameOver={ gameOver }\r\n                resetGame={ resetGame }\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\n\nimport App from './App';\n\nReactDOM.render( <App />, document.getElementById( 'root' ) );\n"],"sourceRoot":""}